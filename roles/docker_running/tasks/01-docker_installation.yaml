---
- name: Creating_Letsencrypt_Live_Directory
  become: true
  check_mode: false
  ansible.builtin.file:
    state: directory
    path: /etc/letsencrypt/live
    owner: "{{ user_groups.elevated_user }}"
    group: "{{ user_groups.elevated_user }}"
    mode: "{{ file_permissions.soft_nonexec }}"

- name: Creating_Letsencrypt_WpMahmoudisari_Subdirectory
  become: true
  check_mode: false
  ansible.builtin.file:
    state: directory
    path: /etc/letsencrypt/live/wp.mahmoudisari.ir
    owner: "{{ user_groups.elevated_user }}"
    group: "{{ user_groups.elevated_user }}"
    mode: "{{ file_permissions.soft_nonexec }}"

- name: Transferring_Letsencrypt_Privkey_Pem_File
  become: true
  check_mode: false
  ansible.builtin.template:
    src: 03-privkey.pem.j2
    dest: /etc/letsencrypt/live/wp.mahmoudisari.ir/privkey.pem
    owner: "{{ user_groups.elevated_user }}"
    group: "{{ user_groups.elevated_user }}"
    mode: "{{ file_permissions.soft_nonexec }}"

- name: Transferring_Letsencrypt_Fullchain_Pem_File
  become: true
  check_mode: false
  ansible.builtin.template:
    src: 03-fullchain.pem.j2
    dest: /etc/letsencrypt/live/wp.mahmoudisari.ir/fullchain.pem
    owner: "{{ user_groups.elevated_user }}"
    group: "{{ user_groups.elevated_user }}"
    mode: "{{ file_permissions.soft_nonexec }}"

- name: Removing_Docker_Unofficial_Packages
  become: true
  check_mode: false
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
    purge: true
    clean: true
    force_apt_get: "{{ aptget_operation_handler }}"
    lock_timeout: "{{ apt_possible_lock_situation_wait_time }}"
  loop: "{{ docker_obselete_packages }}"

- name: Updating_Package_Manager_Sources_List
  become: true
  check_mode: false
  ansible.builtin.apt:
    update_cache: true
    upgrade: safe
    autoclean: true
    autoremove: true
    force_apt_get: "{{ aptget_operation_handler }}"
    update_cache_retries: "{{ apt_operations_retries_attempts }}"
    cache_valid_time: "{{ apt_operations_cached_valid_time }}"
    lock_timeout: "{{ apt_possible_lock_situation_wait_time }}"

- name: Creating_APT_Keyrings_Directory
  become: true
  check_mode: false
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    owner: "{{ user_groups.elevated_user }}"
    group: "{{ user_groups.elevated_user }}"
    mode: "{{ file_permissions.soft_nonexec }}"

- name: Killing_All_Processes_OnPort_1081
  become: true
  check_mode: false
  ansible.builtin.command:
    cmd: "/bin/bash -c 'kill -9 $(lsof -i :1081)'"
  changed_when: false
  failed_when: false

- name: Executing_VPN_File_After_Shutdown
  become: true
  check_mode: false
  ansible.builtin.command:
    cmd: "/bin/bash -c '/home/ubuntu/Xray-linux-64/vpn > /home/ubuntu/log.txt 2>&1 &'"
  changed_when: false
  failed_when: false
  async: 3600
  poll: 0

- name: Pause_Execution_Of_AllTasks_For_VPN
  become: true
  check_mode: false
  ansible.builtin.pause:
    seconds: 30
    prompt: "Please Wait ..."
  failed_when: false

- name: Making_Sure_Port_1081_IsWorking_After_Shutdown
  become: true
  check_mode: false
  ansible.builtin.command:
    cmd: "/bin/bash -c 'netstat -tuln | grep :1081'"
  changed_when: false
  failed_when: false

- name: Obtaining_Docker_GPGKey_From_Official_Link
  become: true
  check_mode: false
  ansible.builtin.uri:
    force: true
    method: GET
    timeout: 60
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    creates: /etc/apt/keyrings/docker.asc
    owner: "{{ user_groups.elevated_user }}"
    group: "{{ user_groups.elevated_user }}"
    mode: "{{ file_permissions.soft_nonexec }}"
  environment: "{{ proxy_env }}"

- name: Setting_Package_Manager_Docker_Source_List
  become: true
  check_mode: false
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] \
      https://download.docker.com/linux/ubuntu jammy stable"
    state: present
    update_cache: true
    update_cache_retries: "{{ apt_operations_retries_attempts }}"
  failed_when: false
  environment: "{{ proxy_env }}"

- name: Installing_Docker_Latest_Packages
  become: true
  check_mode: false
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    autoclean: true
    autoremove: true
    force_apt_get: "{{ aptget_operation_handler }}"
    update_cache_retries: "{{ apt_operations_retries_attempts }}"
    cache_valid_time: "{{ apt_operations_cached_valid_time }}"
    lock_timeout: "{{ apt_possible_lock_situation_wait_time }}"
  loop: "{{ docker_latest_packages }}"
  environment: "{{ proxy_env }}"
